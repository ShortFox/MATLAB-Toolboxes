function synchroDRP(filename, samplerate, phaseMode, doPlot, printStats) %   SYNCHRODRP Calculates and plots synchrony stats between two time-series %%   This function calculates the periods, amplitudes, discrete relative phase %   and average coherence between two times series (and annotates their peaks), %   plots the data and RP time series or distribution of relative phase and %   outputs the stats to a file.%   %   User needs to specify:%       filename        : data file to open; should be 2-column txt or csv file%       samplerate      : sample rate of the time series%       phaseMode       : 1 = inphase, 2 = antiphase%       doPlot          : 1 = yes, 0 = no%       printStats      : output file type (0 = none, 1 = stats + 0-180 distribution, 2 = stats + 0-360 distribution).%%   Syntax:%   synchroDRP(filename, samplerate, phaseMode, doPlot, printStats)%   %   Examples:%       >> synchroDRP('ExData_Inphase.csv', 120, 1, 1, 2);%       >> synchroDRP('ExData_Antiphase.csv', 120, 2, 1, 2);%       >> synchroDRP('ExData_Intermit.csv', 120, 1, 1, 2);%   %   Michael J. Richardson & R. C. Schmidt (2005)%   Last Updated 2009, 2013.%%************************************************************************** %% Define Fixed ParameterslinearDetrend = 1;         % 0=no; 1= perform linear detrend (good idea if drift in data)peakDistance = 0.5;        % 0.5 second minimum periodpeakAmp = .3;              % 20% of max amplitudefilterCutoff = 20;         % cutoff frequency for filter (Hz)rad2deg = 360/(2*pi);      % for converting radians to degreesplot_freq = 10;            % for spectral and coherence plots %% Load Data from filex_data = load(filename);  % should be a 2-column txt or csv filex1 = x_data(:,1);       % 1 indicates the first columns of datax2 = x_data(:,2);       % 2 indicates the second column of data     %% Filter Data using 2nd Order Low-Pass Butterworth Filter[weight_b,weight_a] = butter(2,filterCutoff/(samplerate/2));x1 = filtfilt(weight_b,weight_a,x1);x2 = filtfilt(weight_b,weight_a,x2);  %% Linear detrend dataif linearDetrend == 1    x1 = detrend(x1);    x2 = detrend(x2);end %% Normalize Datax1 = x1-mean(x1);x2 = x2-mean(x2);   %% Get Peaks and Calculate Period Stats& Data[meanPeriod1, sdPeriod1, ~, pLocs1] = period(x1, samplerate, peakDistance, peakAmp);[meanPeriod2, sdPeriod2, ~, pLocs2] = period(x2, samplerate, peakDistance, peakAmp);  %% Get Amplitude Stats & Data[meanAmp1, sdAmp1, ~, ~, ~, vLocs1] = amplitude(x1, samplerate, peakDistance, peakAmp); [meanAmp2, sdAmp2, ~, ~, ~, vLocs2] = amplitude(x2, samplerate, peakDistance, peakAmp); %% Get Coherence Stats & Data[cohereStats, FP1, FP2, cohereFP] = coherence(x1, x2, 100, 256, .5); %% Get Relative Phase Stats and Time Series[meanRP, sdRP, rvRP, radians] = discretephase(x1, x2, samplerate, peakDistance, peakAmp);                                                         meanRP = meanRP*rad2deg;sdRP = sdRP*rad2deg;  %% Define time vector for plottingdelta_t = 1/samplerate; % for time array for plottingdata_len = length(x1);t = 1:data_len;t = t*delta_t;   %% Do PLotsif doPlot ~= 0         %% Create figure as a function a screen size    scrsz = get(0,'ScreenSize');    figure('Position',[scrsz(3)/4 scrsz(4)/4 scrsz(3)/2 scrsz(4)/2]);    h = axes('Position', [0 0 1 1], 'Visible', 'off');         %% annotate figure with stats    set(gcf, 'CurrentAxes', h);    str = 'Time-Series 1:';    text(.075, .12, str, 'FontSize', 10, 'Color', 'b', 'FontWeight', 'bold');    str = sprintf('Period (SD) = %3.3f (%3.3f)',meanPeriod1, sdPeriod1);    text(.075, .08, str, 'FontSize', 10, 'Color', 'k');    str = sprintf('Amplitude (SD) = %3.3f (%3.3f)',meanAmp1, sdAmp1);    text(.075, .04, str, 'FontSize', 10, 'Color', 'k');        str = 'Time-Series 2:';    text(.375, .12, str, 'FontSize', 10, 'Color', 'b', 'FontWeight', 'bold');    str = sprintf('Period (SD) = %3.3f (%3.3f)',meanPeriod2, sdPeriod2);    text(.375, .08, str, 'FontSize', 10, 'Color', 'k');    str = sprintf('Amplitude (SD) = %3.3f (%3.3f)',meanAmp2, sdAmp2);    text(.375, .04, str, 'FontSize', 10, 'Color', 'k');        str = 'Coordination Measures:';    text(.675, .12, str, 'FontSize', 10, 'Color', 'b', 'FontWeight', 'bold');    str = sprintf('Relative Phase (SD, r) = %3.3f (%3.3f, %3.3f)',meanRP, sdRP, rvRP);    text(.675, .08, str, 'FontSize', 10, 'Color', 'k');    str = sprintf('Average Coherence = %3.3f',cohereStats(1));    text(.675, .04, str, 'FontSize', 10, 'Color', 'k');        str = 'File Analyzed:';    text(.42, .97, str, 'FontSize', 10, 'Color', 'b');    str = sprintf('%s',filename);    text(.51, .97, str, 'FontSize', 10, 'Color', 'b', 'FontWeight', 'bold');            %% Plot x1 and x2 time series and mark peaks    axes('Position',[.07 .625 .4 .3])    hold on    plot(t, x1,'r-');    plot(pLocs1*delta_t,x1(pLocs1),'r+', 'MarkerSize', 6)    plot(vLocs1*delta_t,x1(vLocs1),'ro', 'MarkerSize', 4)    plot(t, x2, 'b-')    plot(pLocs2*delta_t,x2(pLocs2),'b+', 'MarkerSize', 6)    plot(vLocs2*delta_t,x2(vLocs2),'bo', 'MarkerSize', 4)    hold off    ylabel('Time-Series');    xlabel('Time');        %% plot x1 and x2 spectrum in log-log    axes('Position',[.56 .625 .17 .3])    f1 = FP1(:,2); p1 = FP1(:,1);    f2 = FP2(:,2); p2 = FP2(:,1);    hold on;    plot(f1(f1<plot_freq),log10(p1(f1<plot_freq)),'ro-', 'MarkerSize', 5);    plot(f2(f2<plot_freq),log10(p2(f2<plot_freq)),'bo-', 'MarkerSize', 5);    hold off;    xlim([0 plot_freq]);    set(gca,'XTick',1:plot_freq)    ylabel('log10(Power)');    xlabel('Frequency');         %% plot coherence    axes('Position',[.81 .625 .17 .3])    f3 = cohereFP(:,2); Cxy = cohereFP(:,1);    plot(f3(f3<plot_freq),Cxy(f3<plot_freq),'ko-', 'MarkerSize', 5)    xlim([0 plot_freq]);    ylim([0 1.1]);    set(gca,'XTick',1:plot_freq)    ylabel('Coherence');    xlabel('Frequency');           %% Plot relative phase time series    axes('Position',[.07 .225 .4 .3])    hold on;    if phaseMode == 2        pRP = (radians.*rad2deg);        pRP(pRP<0) = pRP(pRP<0)+360;        plot(pLocs1*delta_t, pRP,'ob')        ylim([-20 380]);        set(gca,'YTick',[0 180 360])    else        pRP = (radians.*rad2deg);        plot(pLocs1*delta_t, pRP,'ob')        ylim([-200 200]);        set(gca,'YTick',[-180 0 180])    end    hold off;    xlabel('Time');    ylabel('Relative Phase');        %% plot -180 to +180 histogram of relative phase    RP = radians.*rad2deg;    centers = [-170; -150; -130; -110; -90; -70; -50; -30; -10;...            10; 30; 50; 70; 90; 110; 130; 150; 170];    axes('Position',[.56 .225 .17 .3])    hist(RP,centers, 'b');    h = findobj(gca,'Type','patch');    set(h,'FaceColor', [.5 .5 .5],'EdgeColor','k');    xlim([-180 180]);    set(gca,'XTick',[-180 0 180]);    ylabel('Freq Occurence');    xlabel('Relative Phase Angle');            %% plot 0-180 histogram of relative phase    absRP = abs(radians.*rad2deg);    hRP = zeros(length(absRP),1);    for i = 1:length(absRP)        if absRP(i) > 180            hRP(i) = 180 - (absRP(i) - 180);        else            hRP(i) = absRP(i);        end    end    centers = [10; 30; 50; 70; 90; 110; 130; 150; 170];    axes('Position',[.81 .225 .17 .3])    hist(hRP,centers, 'b');    h = findobj(gca,'Type','patch');    set(h,'FaceColor', [.5 .5 .5],'EdgeColor','k');    xlim([0 180]);    set(gca,'XTick',[0 90 180]);    ylabel('Freq Occurence');    xlabel('Relative Phase Angle');       end %% Print Collected Stats to output fileif printStats == 1    absRP = abs(radians.*rad2deg);    for i = 1:length(absRP)        if absRP(i) > 180            hRP(i) = 180 - (absRP(i) - 180);        else            hRP(i) = absRP(i);        end    end    centers = [10; 30; 50; 70; 90; 110; 130; 150; 170];    counts = hist(hRP,centers);    fid = fopen('synchroDRP_Stats.csv','a');    fprintf(fid,'%s,',filename);    fprintf(fid,'%.4f,%.4f,%.4f,%.4f,',meanPeriod1, sdPeriod1, meanAmp1, sdAmp1);    fprintf(fid,'%.4f,%.4f,%.4f,%.4f,',meanPeriod2, sdPeriod2, meanAmp2, sdAmp2);    fprintf(fid,'%.4f,%.4f,%.4f,%.4f,',cohereStats(1), meanRP, sdRP, rvRP);    fprintf(fid,'%.4f,',counts/length(absRP)*100);    fprintf(fid,'\n');    fclose(fid); elseif printStats == 2    RP = radians.*rad2deg;    centers = [-170; -150; -130; -110; -90; -70; -50; -30; -10;...            10; 30; 50; 70; 90; 110; 130; 150; 170];    counts = hist(RP,centers);    fid = fopen('synchroDRP_Stats.csv','a');    fprintf(fid,'%s,',filename);    fprintf(fid,'%.4f,%.4f,%.4f,%.4f,',meanPeriod1, sdPeriod1, meanAmp1, sdAmp1);    fprintf(fid,'%.4f,%.4f,%.4f,%.4f,',meanPeriod2, sdPeriod2, meanAmp2, sdAmp2);    fprintf(fid,'%.4f,%.4f,%.4f,%.4f,',cohereStats(1), meanRP, sdRP, rvRP);    fprintf(fid,'%.4f,',counts/length(RP)*100);    fprintf(fid,'\n');    fclose(fid);end %% end of function%------------------------------------------------------------------------------------------------------------------