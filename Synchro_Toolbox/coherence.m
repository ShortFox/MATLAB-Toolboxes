function  [cohereStats, FP1, FP2, cohereFP] = coherence(x, y, samplerate, windowSize, windowOverlap)%   COHERENCE calculates the average cross-spectral coherence at the %   fundamental frequencies of the two time series. Outputs mean coherence %   and the coherence at each fundamental frequency (in cohereStats), as %   well as the power/frequency functions for each TS and the cross-spectral%   coherence analysis.%%   Example Syntax:  %   [cohereStats, FP1, FP2, cohereFP] = coherence(x, y, 100, 256, .5)%%   M. J. Richardson and R. C. Schmidt 2005%   Revision 2009 (Michael J Richardson)      %------------------------------------------------------------------------------------- %% Linear Detrendx = detrend(x);y = detrend(y); %% Normalize as zscorex =  x-mean(x)./std(x);y =  y-mean(y)./std(y); %% Determine FFT Parameterswindow = hanning(windowSize);           % window functionn_overlap = windowSize*windowOverlap;  % number of samples overlap                  %% Calculate Spectrum for each TS spec                    [power1,freq1] = pwelch(x,window,n_overlap,windowSize,samplerate);                    [power2,freq2] = pwelch(y,window,n_overlap,windowSize,samplerate);FP1 = [power1,freq1];FP2 = [power2,freq2]; %% Calculate Coherence[Cxy,f3] = mscohere(x,y,window,n_overlap,windowSize,samplerate);cohereFP = [Cxy,f3]; %% Calculate Coherence Stats[~,x_i] = max(power1(2:end));[~,y_i] = max(power2(2:end));cohereStats = [(Cxy(x_i+1) +  Cxy(y_i+1))/2, Cxy(x_i+1),Cxy(y_i+1)]; %% End of functionreturn;%**************************************************************************%**************************************************************************